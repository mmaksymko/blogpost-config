spring:
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    open-in-view: false
  kafka:
    consumer:
      group-id: comments-service-group-id
      auto-offset-reset: earliest
  data:
    redis:
      port: 6379
      password: ${REDIS_PASSWORD:"{cipher}720abc8f84b313cf215850ae5591f09aac4b13c93b7fddb0229895e392e30eb1"}
      database: 0
  datasource:
    driverClassName: org.postgresql.Driver
    username: ${POSTGRES_USER:"{cipher}116c45733072ecd24f41f4ddd289261e663a42b2c7634278b2ccc3cb303370e2"}
    password: ${POSTGRES_PASSWORD:"{cipher}720abc8f84b313cf215850ae5591f09aac4b13c93b7fddb0229895e392e30eb1"}

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true

resilience4j:
  retry:
    instances:
      retry-comment:
        max-attempts: 3
        wait-duration: 1s
        record-exceptions:
          - org.springframework.dao.DataAccessResourceFailureException
          - org.springframework.dao.QueryTimeoutException
          - org.springframework.dao.CannotAcquireLockException
          - org.springframework.dao.DeadlockLoserDataAccessException
  ratelimiter:
    instances:
      rate-limit-comment:
        timeout-duration: 5s
        limit-refresh-period: 5s
        limit-for-period: 2
  circuitbreaker:
    instances:
      circuit-breaker-comment:
        register-health-indicator: true
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        record-exceptions:
          - dev.mmaksymko.comments.configs.exceptions.ExternalApiServerException

jwt:
  secret: ${JWT_SECRET_KEY:secret}

server:
  port: 8082

logging:
  level:
    org:
      apache:
        kafka:
          clients: WARN
          common:
            utils:
              AppInfoParser: WARN